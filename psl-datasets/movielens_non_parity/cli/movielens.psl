// Similarities like Pearson, Cosine, and Adjusted Cosine Similarity between item ratings.
1.0 : rated(U,I1) & rated(U,I2) & rating(U,I1) & sim_items(I1,I2) >> rating(U,I2)^2
1.0 : rated(U,I1) & rated(U,I2) & !rating(U,I1) & sim_items(I1,I2) >> !rating(U,I2)^2

// Similarities like Pearson and Cosine Similarity between user ratings.
1.0 : rated(U1,I) & rated(U2,I) & rating(U1,I) & sim_users(U1,U2) >> rating(U2,I)^2
1.0 : rated(U1,I) & rated(U2,I) & !rating(U1,I) & sim_users(U1,U2) >> !rating(U2,I)^2

// Predictions by local nmf predictor
1.0 : nmf_rating(U, I) & target(U, I) >> rating(U, I)^2

// Content rule by similarity.
1.0 : rated(U,I1) & rated(U,I2) & rating(U,I1) & sim_content_items(I1,I2) >> rating(U,I2)^2
1.0 : rated(U,I1) & rated(U,I2) & !rating(U,I1) & sim_content_items(I1,I2) >> !rating(U,I2)^2

// Non-Parity Unfairness Constraints
// Non parity minimizes the absolute difference between the overall average
// predicted ratings between the groups
// The group_avg_rating rating should be weighted by the number of rating that item received for that group.
// rating(+U, +I) / @Max[1, |U|] = group_avg_rating(G) . {U: group_member(U, G) & target(U, I)} {I: group_member(U, G) & target(U, I)}
// function() = group_avg_rating(G)

//rating(+U, +I) / 8157 = group1_avg_rating(c) . {U: group_1(U)} {I: group_1_item_block(I)}
//rating(+U, +I) / 21843 = group2_avg_rating(c) . {U: group_2(U)} {I: group_2_item_block(I)}
//1.0 : group1_avg_rating(c) = group2_avg_rating(c)^2

rating(+U, I) / @Max[1, |U|] = group_avg_item_rating(G, I) . {U: group_member(U, G) & target(U, I)}
group_avg_item_rating(G, +I)/|I| = group_avg_rating(G) . {I: group_item_block(G, I)}
50.0 : group_avg_rating(G1) = group_avg_rating(G2)^2